#ifndef ESTD_VALUE_PTR
#define ESTD_VALUE_PTR

#include <type_traits>
#include <stdexcept>
#include <memory>

#include <iostream>

namespace std
{
  template<class T>
  struct value_ptr
  {
    template <typename... Args>
    explicit value_ptr(Args ...args)
    : data{new T{args...}}
    { 
      std::cout << __PRETTY_FUNCTION__ << std::endl;
    }

    value_ptr(T* x) : data{x}
    {
      std::cout << __PRETTY_FUNCTION__ << std::endl;
    }
   
    value_ptr(value_ptr &&x) : data{move(data)}
    {
      std::cout << __PRETTY_FUNCTION__ << std::endl;
    }
    
    value_ptr(const value_ptr &x) : data{move(unique_ptr<T>(x->clone()))}
    { 
      std::cout << __PRETTY_FUNCTION__ << std::endl;
    }

    value_ptr & operator=(const value_ptr &x)
    {
      data = move(unique_ptr<T>(x->clone()));
      return *this;
      //return (*this = move(x->clone()));
    }

    value_ptr & operator=(value_ptr &&x)
    {
      std::cout << __PRETTY_FUNCTION__ << std::endl;
      data = std::move(x.data);
      return *this;
    }

    T& operator *(int) { return *data; }
    T* operator ->() { return data.get(); }
    const T* operator ->() const { return data.get(); }

    bool operator==(const value_ptr &x) const
    {
      return *data == *x.get();
    }
    
    bool operator!=(const value_ptr &x) const
    {
      return *data != *x.get();
    }

    T* get() { return data.get(); }
    const T* get() const { return data.get(); }

    template<class TT>
    value_ptr<TT> as() const
    {
      TT* p = dynamic_cast<TT*>(data.get());
      if(!p) throw std::bad_cast{};
      return move(value_ptr<TT>{move(*p)});
    }

    private:
      unique_ptr<T> data;
  };

  template<typename T>
  struct clonable
  {
    T* clone() const & 
    { 
      std::cout << __PRETTY_FUNCTION__ << std::endl;
      return new T{*static_cast<const T*>(this)};
    }
  };

}

#endif
