#ifndef ESTD_VALUE_PTR
#define ESTD_VALUE_PTR

#include <type_traits>
#include <memory>

namespace std
{
  /*
  template<class...>
  using void_t = void;
  */

  template<class, class = void_t<>>
  struct is_clonable : false_type { };

  template<class T>
  struct is_clonable<T, void_t<decltype(declval<T&>().clone())>> : true_type { };

  /*
  template<class T> inline
  typename enable_if<is_clonable<T>::value, T*>::type
  clone(T && x)
  {
    return x.clone(); 
  }
  */
  
  template<class T> inline
  typename enable_if<is_clonable<T>::value, T*>::type
  clone(T & x)
  {
    return x.clone(); 
  }
  
  template<class T> inline
  typename enable_if<is_clonable<T>::value, T*>::type
  clone(T * x)
  {
    return x->clone(); 
  }

  template<class T> inline
  typename enable_if<is_fundamental<T>::value, T*>::type
  clone(const T & x)
  {
    T *xp = new T;
    *xp = x;
    return xp;
  }

  //struct __value_ptr {};

  template<class T>
  struct value_ptr //: public __value_ptr
  {
    T& operator *() { return *data; }
    T* operator ->() { return data.get(); }

    value_ptr() : data{new T} { }
    value_ptr(T *x) : data{clone(x)} {}
    //value_ptr(T && x) : data{clone(move(x))} { } 
    value_ptr(const value_ptr &x) 
    { 
      data.reset(clone(*x.data.get()));
      //*this = x; 
    }

    value_ptr & operator=(const value_ptr &x)
    {
      data.reset(clone(*x.data.get()));
      return *this;
    }

    bool operator==(const value_ptr &x)
    {
      return *data == *x;
    }

    T* get() { return data.get(); }

    template<class TT>
    TT& as()
    {
      return *dynamic_cast<TT*>(data.get());
    }

    private:
      unique_ptr<T> data;
  };
}

#endif
