#ifndef ESTD_VALUE_PTR
#define ESTD_VALUE_PTR

#include <type_traits>
#include <stdexcept>
#include <memory>

#include <iostream>

/*
#define RED     "\x1b[38;5;202m"
#define BLUE    "\x1b[38;5;33m"
#define GREEN   "\x1b[38;5;36m"
#define SUBDUE  "\x1b[38;5;12m"
#define RESET   "\x1b[0m"
*/

#ifdef DEBUG
#define DIAG std::cout << __PRETTY_FUNCTION__ << std::endl;
#else
#define DIAG do {} while(0)
#endif

#ifdef DEBUG
#define WDIAG std::cout <<  __PRETTY_FUNCTION__ << std::endl;
#else
#define WDIAG do {} while(0)
#endif

namespace std
{
  template<class T>
  struct value_ptr
  {
    template <typename... Args>
    explicit value_ptr(Args ...args)
    : data{new T{args...}}
    { 
      DIAG;
    }

    template<typename TT, typename... Args>
    static value_ptr from_child(Args ...args)
    {
      DIAG;
      return move(value_ptr{unique_ptr<T>{new TT{args...}}});
    }

    value_ptr(T* x) : data{x}
    {
      DIAG;
    }
   
    value_ptr(value_ptr &&x) : data{move(x.data)}
    {
      DIAG;
    }
    
    value_ptr(const value_ptr &x) : data{x->clone()}
    { 
      WDIAG;
    }

    value_ptr & operator=(const value_ptr &x)
    {
      WDIAG;
      data = move(unique_ptr<T>(x->clone()));
      return *this;
    }

    value_ptr & operator=(value_ptr &&x)
    {
      DIAG;
      data = std::move(x.data);
      return *this;
    }

    virtual ~value_ptr() = default;

    T& operator *() { return *data; }
    T* operator ->() { return data.get(); }
    const T* operator ->() const { return data.get(); }

    bool operator==(const value_ptr &x) const
    {
      return *data == *x.get();
    }
    
    bool operator!=(const value_ptr &x) const
    {
      return *data != *x.get();
    }

    T* get() { return data.get(); }
    const T* get() const { return data.get(); }

    template<class TT>
    value_ptr<TT> & as() const
    {
      /*
      TT* p = dynamic_cast<TT*>(data.get());
      if(!p) throw std::bad_cast{};
      return move(value_ptr<TT>{move(*p)});
      */
      return *((value_ptr<TT>*)this);
    }

    private:
      value_ptr(unique_ptr<T> && data) 
        : data{move(data)} 
      {
        DIAG;
      }
      unique_ptr<T> data;
  };

  template<typename T>
  struct clonable
  {
    T* clone() const & 
    { 
      WDIAG;
      return new T{*static_cast<const T*>(this)};
    }
  };

}

#endif
